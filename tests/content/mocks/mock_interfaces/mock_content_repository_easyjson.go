// TEMPORARY AUTOGENERATED FILE: easyjson stub code to make the package
// compilable during generation.

package  mock_interfaces

import (
  "github.com/mailru/easyjson/jwriter"
  "github.com/mailru/easyjson/jlexer"
)

func ( MockContentRepository ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* MockContentRepository ) UnmarshalJSON([]byte) error { return nil }
func ( MockContentRepository ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* MockContentRepository ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_MockContentRepository *MockContentRepository

func ( MockContentRepositoryMockRecorder ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* MockContentRepositoryMockRecorder ) UnmarshalJSON([]byte) error { return nil }
func ( MockContentRepositoryMockRecorder ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* MockContentRepositoryMockRecorder ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_MockContentRepositoryMockRecorder *MockContentRepositoryMockRecorder

func ( MockFeedInterface ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* MockFeedInterface ) UnmarshalJSON([]byte) error { return nil }
func ( MockFeedInterface ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* MockFeedInterface ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_MockFeedInterface *MockFeedInterface

func ( MockFeedInterfaceMockRecorder ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* MockFeedInterfaceMockRecorder ) UnmarshalJSON([]byte) error { return nil }
func ( MockFeedInterfaceMockRecorder ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* MockFeedInterfaceMockRecorder ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_MockFeedInterfaceMockRecorder *MockFeedInterfaceMockRecorder

func ( MockLikePostInterface ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* MockLikePostInterface ) UnmarshalJSON([]byte) error { return nil }
func ( MockLikePostInterface ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* MockLikePostInterface ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_MockLikePostInterface *MockLikePostInterface

func ( MockLikePostInterfaceMockRecorder ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* MockLikePostInterfaceMockRecorder ) UnmarshalJSON([]byte) error { return nil }
func ( MockLikePostInterfaceMockRecorder ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* MockLikePostInterfaceMockRecorder ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_MockLikePostInterfaceMockRecorder *MockLikePostInterfaceMockRecorder

func ( MockMediaInterface ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* MockMediaInterface ) UnmarshalJSON([]byte) error { return nil }
func ( MockMediaInterface ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* MockMediaInterface ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_MockMediaInterface *MockMediaInterface

func ( MockMediaInterfaceMockRecorder ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* MockMediaInterfaceMockRecorder ) UnmarshalJSON([]byte) error { return nil }
func ( MockMediaInterfaceMockRecorder ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* MockMediaInterfaceMockRecorder ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_MockMediaInterfaceMockRecorder *MockMediaInterfaceMockRecorder

func ( MockPostInterface ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* MockPostInterface ) UnmarshalJSON([]byte) error { return nil }
func ( MockPostInterface ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* MockPostInterface ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_MockPostInterface *MockPostInterface

func ( MockPostInterfaceMockRecorder ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* MockPostInterfaceMockRecorder ) UnmarshalJSON([]byte) error { return nil }
func ( MockPostInterfaceMockRecorder ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* MockPostInterfaceMockRecorder ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_MockPostInterfaceMockRecorder *MockPostInterfaceMockRecorder
