// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	os "os"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBa6bd48cDecodeGithubComGoParkMailRu20242TeamOnPatreonInternalContentControllerModels(in *jlexer.Lexer, out *MediaGetSuccessResponseMediaContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mediaId":
			out.MediaId = string(in.String())
		case "mediaType":
			out.MediaType = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "file":
			if in.IsNull() {
				in.Skip()
				out.File = nil
			} else {
				if out.File == nil {
					out.File = new(*os.File)
				}
				if in.IsNull() {
					in.Skip()
					*out.File = nil
				} else {
					if *out.File == nil {
						*out.File = new(os.File)
					}
					easyjsonBa6bd48cDecodeOs(in, *out.File)
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBa6bd48cEncodeGithubComGoParkMailRu20242TeamOnPatreonInternalContentControllerModels(out *jwriter.Writer, in MediaGetSuccessResponseMediaContent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MediaId != "" {
		const prefix string = ",\"mediaId\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MediaId))
	}
	if in.MediaType != "" {
		const prefix string = ",\"mediaType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MediaType))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.File != nil {
		const prefix string = ",\"file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.File == nil {
			out.RawString("null")
		} else {
			easyjsonBa6bd48cEncodeOs(out, **in.File)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MediaGetSuccessResponseMediaContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBa6bd48cEncodeGithubComGoParkMailRu20242TeamOnPatreonInternalContentControllerModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MediaGetSuccessResponseMediaContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBa6bd48cEncodeGithubComGoParkMailRu20242TeamOnPatreonInternalContentControllerModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MediaGetSuccessResponseMediaContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBa6bd48cDecodeGithubComGoParkMailRu20242TeamOnPatreonInternalContentControllerModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MediaGetSuccessResponseMediaContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBa6bd48cDecodeGithubComGoParkMailRu20242TeamOnPatreonInternalContentControllerModels(l, v)
}
func easyjsonBa6bd48cDecodeOs(in *jlexer.Lexer, out *os.File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.file = new(os.file)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBa6bd48cEncodeOs(out *jwriter.Writer, in os.File) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
