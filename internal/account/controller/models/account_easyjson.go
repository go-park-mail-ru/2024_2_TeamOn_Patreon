// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2024_2_TeamOn_Patreon/internal/account/service/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson349b126bDecodeGithubComGoParkMailRu20242TeamOnPatreonInternalAccountControllerModels(in *jlexer.Lexer, out *Account) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "subscriptions":
			if in.IsNull() {
				in.Skip()
				out.Subscriptions = nil
			} else {
				in.Delim('[')
				if out.Subscriptions == nil {
					if !in.IsDelim(']') {
						out.Subscriptions = make([]models.Subscription, 0, 2)
					} else {
						out.Subscriptions = []models.Subscription{}
					}
				} else {
					out.Subscriptions = (out.Subscriptions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.Subscription
					easyjson349b126bDecodeGithubComGoParkMailRu20242TeamOnPatreonInternalAccountServiceModels(in, &v1)
					out.Subscriptions = append(out.Subscriptions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComGoParkMailRu20242TeamOnPatreonInternalAccountControllerModels(out *jwriter.Writer, in Account) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"subscriptions\":"
		out.RawString(prefix)
		if in.Subscriptions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Subscriptions {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson349b126bEncodeGithubComGoParkMailRu20242TeamOnPatreonInternalAccountServiceModels(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Account) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson349b126bEncodeGithubComGoParkMailRu20242TeamOnPatreonInternalAccountControllerModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Account) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson349b126bEncodeGithubComGoParkMailRu20242TeamOnPatreonInternalAccountControllerModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Account) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson349b126bDecodeGithubComGoParkMailRu20242TeamOnPatreonInternalAccountControllerModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Account) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson349b126bDecodeGithubComGoParkMailRu20242TeamOnPatreonInternalAccountControllerModels(l, v)
}
func easyjson349b126bDecodeGithubComGoParkMailRu20242TeamOnPatreonInternalAccountServiceModels(in *jlexer.Lexer, out *models.Subscription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AuthorID":
			out.AuthorID = string(in.String())
		case "AuthorName":
			out.AuthorName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeGithubComGoParkMailRu20242TeamOnPatreonInternalAccountServiceModels(out *jwriter.Writer, in models.Subscription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AuthorID\":"
		out.RawString(prefix[1:])
		out.String(string(in.AuthorID))
	}
	{
		const prefix string = ",\"AuthorName\":"
		out.RawString(prefix)
		out.String(string(in.AuthorName))
	}
	out.RawByte('}')
}
