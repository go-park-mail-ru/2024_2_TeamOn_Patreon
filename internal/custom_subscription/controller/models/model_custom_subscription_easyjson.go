// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson633f8c1bDecodeGithubComGoParkMailRu20242TeamOnPatreonInternalCustomSubscriptionControllerModels(in *jlexer.Lexer, out *CustomSubscription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "customSubscriptionID":
			out.CustomSubscriptionID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "cost":
			out.Cost = int(in.Int())
		case "layer":
			out.Layer = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson633f8c1bEncodeGithubComGoParkMailRu20242TeamOnPatreonInternalCustomSubscriptionControllerModels(out *jwriter.Writer, in CustomSubscription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"customSubscriptionID\":"
		out.RawString(prefix[1:])
		out.String(string(in.CustomSubscriptionID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"cost\":"
		out.RawString(prefix)
		out.Int(int(in.Cost))
	}
	{
		const prefix string = ",\"layer\":"
		out.RawString(prefix)
		out.Int(int(in.Layer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CustomSubscription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson633f8c1bEncodeGithubComGoParkMailRu20242TeamOnPatreonInternalCustomSubscriptionControllerModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CustomSubscription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson633f8c1bEncodeGithubComGoParkMailRu20242TeamOnPatreonInternalCustomSubscriptionControllerModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CustomSubscription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson633f8c1bDecodeGithubComGoParkMailRu20242TeamOnPatreonInternalCustomSubscriptionControllerModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CustomSubscription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson633f8c1bDecodeGithubComGoParkMailRu20242TeamOnPatreonInternalCustomSubscriptionControllerModels(l, v)
}
